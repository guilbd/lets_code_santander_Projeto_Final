# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L_rQLRHiBBTU1Q-WMYppNu_krp6QxkLg
"""

import requests as r #importação da bilbioteca que acessa a utl desejada
import datetime as dt
import csv
from PIL import Image
from IPython.display import display

url = 'https://api.covid19api.com/dayone/country/brazil' #variavel que recebe o site ou acessa a api desejada
resp = r.get(url)  #variável que recebe os dados provenientes da variável URL

resp.status_code #print de verificação do status 200 = ok

raw_data = resp.json() #variável que recebe o dicionário com os dados da API
raw_data[0] #print de verificação

final_data = []

for obs in raw_data: #for para criação da lista filtrada com os dados que desejo
    final_data.append([obs['Confirmed'], obs['Deaths'], obs['Recovered'], obs['Active'], obs['Date']]) #append dos dados que desejo para nova lista. É uma lista dentro de outra lista da

final_data #print de verificação da lista criadar

final_data.insert(0, ['confirmado', 'obitos', 'recuperados', 'ativos', 'data']) #inserção do cabeçalho na posição 0

#criação de variáves para facilitar a manipulação dos dados
confirmados = 0
obitos = 1
recuperados = 2
ativos = 3
data = 4

for i in range(1, len(final_data)): #for para pegar cada posição dentro da posição que desejo
    final_data[i][data] = final_data[i][data][:10] # tratamento da data pegando somente os 10 primeiros caracteres (slice)

for i in range(1, len(final_data)): #transformação da string que temos no campo data em formato data efetivamente. Começa na posição 1 pois a posição 0 é o cabeçalho
    final_data[i][data] = dt.datetime.strptime(final_data[i][data], '%Y-%m-%d') #dt.datetime.strptime => função que retorna o formato data na formatação desejada

def get_datasets(y, labels):
    if type(y[0]) == list:
        datasets = []
        for i in range (len(y)):
            datasets.append({
                'label': labels[i],
                'data': y[i]
            })
        return datasets
    else:
        return [
              {
                'label': labels[0],
               'data': y
        }]

def set_title(title = ''):
    if title != '':
        display = 'true'
    else:
        display = 'false'
    return{
        'title': title,
        'display': display
    }

def create_chart(x, y, labels, kind = 'bar', title =''):
    datasets = get_datasets(y, labels)
    options = set_title(title)

    chart = {
        'type': kind,
        'data': {
            'labels': x,
            'datasets': datasets
        },
        'options': options
    }
    return chart

def get_api_chart(chart):
    url_base = 'https://quickchart.io/chart'
    resp = r.get(f'{url_base}?c={str(chart)}')
    return resp.content

def save_image(path, content):
    with open(path, 'wb') as image:
        image.write(content)

def display_image(path):
    img_pil = Image.open(path)
    display(img_pil)

y_data_1 = []
for obs in final_data[1::10]:
    y_data_1.append(obs[confirmados])

y_data_2 = [] 
for obs in final_data[1::10]:
    y_data_2.append(obs[recuperados])

labels = ['confirmados', 'recuperados']

x = []
for obs in final_data[1::10]:
    x.append(obs[data].strftime('%d/%m/%Y'))

chart = create_chart(x, [y_data_1, y_data_2], labels, title = 'Gráfico Confirmados x Recuperados')
chart_content = get_api_chart(chart)
save_image('meu-primeiro-grafico.png', chart_content)
display_image('meu-primeiro-grafico.png')